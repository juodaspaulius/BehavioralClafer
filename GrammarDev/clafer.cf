entrypoints Module ;


-- To regenerate grammar:
--         cd src/Front
--         bnfc -m -haskell clafer.cf
--         Modify files Absclafer.hs, ErrM.hs, Printclafer.hs, so that they consider Front as a module name. (can be done by running make from src).
--         happy -gca Parclafer.y
--         alex -g Lexclafer.x

comment "//" ;
comment "/*" "*/" ;

Module.         Module ::= [Declaration] ;

EnumDecl.       Declaration ::= "enum" PosIdent "=" [EnumId] ;
ElementDecl.    Declaration ::= Element ;

Clafer.         Clafer ::= Abstract GCard PosIdent Super Card Init Elements ;
Constraint.     Constraint ::= "[" ConstraintExp "]" ;
SoftConstraint. SoftConstraint ::= "(" [Exp] ")";
Goal.   	Goal ::= "<<" [Exp] ">>" ;

-- Behavioral Clafer BEGIN ------------------

-- LTLConstraint.	Element	::=	"[[" LTLExp "]]";
-- BConstraint.	BConstraint	::=	PatternExp ;

PatternConstraint.	ConstraintExp ::= TmpPatExp;
LTLConstraint.		ConstraintExp ::= LTLExp;
StructConstraint.	ConstraintExp ::= Exp;


-- LTL BEGIN
-- precedence order: <AP>, !, X, G, F, W, U, R, &&, ||, =>, <=> 

--LTL Version 1
{-

LTLImplies.     LTLExp   ::=   LTLExp "=>" LTLExp1;
LTLOr.          LTLExp1  ::=   LTLExp1 "||" LTLExp2;
LTLAnd.         LTLExp2  ::=   LTLExp2 "&&" LTLExp3;
LTLRelease.	LTLExp3	 ::=   LTLExp3 "R" LTLExp4;
LTLUntil.	LTLExp4	 ::=   LTLExp4 "U" LTLExp5;
LTLWeakUntil.	LTLExp5	 ::=   LTLExp5 "W" LTLExp6;
LTLFinally.	LTLExp6	 ::=   "F" LTLExp7;
LTLGlobally.	LTLExp7	 ::=   "G" LTLExp8;
LTLNext.	LTLExp8	 ::=   "X" LTLExp9;
LTLNot.         LTLExp9	 ::=   "!" LTLExp10;
_.              LTLExp10  ::= "(" LTLExp ")";
LTLAtom.	LTLExp10  ::= Name;

-}

--LTL Version 2
{-

LTLImplies.     LTLExp   ::=   LTLExp "=>" LTLExp1;
LTLOr.          LTLExp1  ::=   LTLExp1 "||" LTLExp2;
LTLAnd.         LTLExp2  ::=   LTLExp2 "&&" LTLExp3;
LTLRelease.	LTLExp3	 ::=   LTLExp3 "R" LTLExp4;
LTLUntil.	LTLExp4	 ::=   LTLExp4 "U" LTLExp5;
LTLWeakUntil.	LTLExp5	 ::=   LTLExp5 "W" LTLExp6;
LTLFinally.	LTLExp6	 ::=   "F" LTLExp7;
LTLGlobally.	LTLExp7	 ::=   "G" LTLExp8;
LTLNext.	LTLExp8	 ::=   "X" LTLExp9;
LTLNot.         LTLExp9	 ::=   "!" LTLExp10;
_.         	LTLExp10  ::= "(" LTLExp ")";
LTLAtom.	LTLExp10  ::= Name;
LTLExp.		LTLExp ::= "(" Exp ")";

-}


--LTL Version 3

-- precedence order: <AP>, !, X, G, F, W, U, R, &&, ||, =>, <=> 

LTLDeclAllDisj.		LTLExp   ::= "all" "disj" Decl "|" LTLExp ;
LTLDeclAll.		LTLExp   ::= "all"        Decl "|" LTLExp ;
LTLDeclQuantDisj.	LTLExp   ::= Quant "disj" Decl "|" LTLExp ;
LTLDeclQuant.      	LTLExp   ::= Quant        Decl "|" LTLExp ;

-- Question
-- Do we need max and min for LTL expressions?
-- LTLEGMax.	LTLExp1  ::= "max" LTLExp2 ;
-- LTLEGMin.	LTLExp1  ::= "min" LTLExp2 ;

LTLIff.		LTLExp1 ::= LTLExp "<=>" LTLExp2 ;

LTLImplies.     LTLExp2 ::= LTLExp "=>" LTLExp1;
LTLOr.          LTLExp1 ::= LTLExp1 "||" LTLExp2;
LTLAnd.         LTLExp2 ::= LTLExp2 "&&" LTLExp3;
LTLRelease.	LTLExp3	::= LTLExp3 "R" LTLExp4;
LTLUntil.	LTLExp4	::= LTLExp4 "U" LTLExp5;
LTLWeakUntil.	LTLExp5	::= LTLExp5 "W" LTLExp6;
LTLFinally.	LTLExp6	::= "F" LTLExp7;
LTLGlobally.	LTLExp7	::= "G" LTLExp8;
LTLNext.	LTLExp8	::= "X" LTLExp9;
LTLNot.         LTLExp9	::= "!" LTLExp10;

LTLELt.		LTLExp10  ::= LTLExp10 "<"  LTLExp11 ;
LTLEGt.         LTLExp10  ::= LTLExp10 ">"  LTLExp11 ;
LTLEEq.         LTLExp10  ::= LTLExp10 "="  LTLExp11 ;
LTLELte.        LTLExp10  ::= LTLExp10 "<=" LTLExp11 ;
LTLEGte.        LTLExp10  ::= LTLExp10 ">=" LTLExp11 ;
LTLENeq.        LTLExp10  ::= LTLExp10 "!=" LTLExp11 ;
LTLEIn.         LTLExp10  ::= LTLExp10 "in" LTLExp11 ;
LTLENin.        LTLExp10  ::= LTLExp10 "not" "in" LTLExp11 ;

LTLQuantExp.	LTLExp11  ::= Quant LTLExp12 ;
LTLEAdd.        LTLExp11  ::= LTLExp11 "+" LTLExp12 ;
LTLESub.        LTLExp11  ::= LTLExp11 "-" LTLExp12 ;
LTLEMul.        LTLExp12  ::= LTLExp12 "*" LTLExp13 ;
LTLEDiv.        LTLExp12  ::= LTLExp12 "/" LTLExp13 ;

LTLECSetExp.	LTLExp13  ::= "#" LTLExp12 ;
LTLEMinExp.     LTLExp13  ::= "-" LTLExp12 ;
LTLEImpliesElse. LTLExp12  ::= "if" LTLExp12 "then" LTLExp12 "else" LTLExp13 ;
LTLEInt.	LTLExp13  ::= PosInteger ;
LTLEDouble.     LTLExp13  ::= PosDouble ;
LTLEStr.        LTLExp13  ::= PosString ;
LTLESetExp.     LTLExp13  ::= SetExp ;

-- Question
-- Do we need sum for an LTL expression?
-- LTLESumSetExp.     LTLExp13  ::= "sum" LTLExp12;







--LTLAtom1.	LTLExp12 ::= "(" Name ")";
--LTLAtom2.	LTLExp13 ::= Name;
--_.              LTLExp14 ::= "(" LTLExp ")";

--LTLAtom.	LTLAtom ::= Name;
--LTLExp.		LTLExp	::= 

--LTLAPExp1.       LTLExp10  ::= SetExp;
--LTLAPExp2.       LTLExp11  ::= Name;
--LTLAPExp.       LTLExp10  ::= Exp;

-- _.      	LTLAtom ::= "<" Exp1 ">";
-- _.           LTLAtom ::= Name;
-- LTL END


-- The scope's parameters for all Temporal Patterns are basically an expression 
ScopeParam.         ScopeParam ::= Exp;
--ScopeParam.         ScopeParam ::= (Exp);

TmpScopeGlobally.	TmpScope ::= "globally";
TmpScopeGlobally.	TmpScope ::= ;
TmpScopeBefore.	TmpScope  ::= "before" ScopeParam;
TmpScopeAfter.	TmpScope  ::= "after" ScopeParam;
TmpScopeBetweenAnd.	TmpScope ::= "between" ScopeParam "and" ScopeParam;
TmpScopeAfterUntil.	TmpScope ::= "after" ScopeParam "until" ScopeParam;

--Question: here maybe we can use something like this?
-- 	_.	TmpScope ::= ;   or 	coercions TmpScope 1;
-- instead of:	TmpScopeGlobally.	TmpScope ::= ;

-- List of Temporal Patterns
TmpPrecedes.	TmpPatExp ::= Exp "precedes" Exp TmpScope;
TmpRespondsTo. 	TmpPatExp ::= Exp "respondsTo" Exp TmpScope;
TmpRespondsTo. 	TmpPatExp ::= Exp "responds" "to" Exp TmpScope;

--Question
-- Do we need to change the previous rule to look like the following?
-- TmpRespondsTo. 	TmpPatExp ::= Exp "responds" "to" Exp TmpScope;

TmpRespondsTo. 	TmpPatExp ::= Exp "respondsTo" Exp TmpScope;





-- End of temporal Patterns
-- Behavioral Clafer END ----------------------

AbstractEmpty.  Abstract ::= ;
Abstract.       Abstract ::= "abstract" ;

-- ElementsEmpty causes parsing problems
ElementsEmpty.  Elements ::= ;
ElementsList.   Elements ::= "{" [Element] "}" ;

Subclafer.      Element ::= Clafer ;
ClaferUse.      Element ::= "`" Name Card Elements ;
Subconstraint.  Element ::= Constraint ;
Subgoal. 	Element ::= Goal; 
Subsoftconstraint. Element ::=SoftConstraint;

SuperEmpty.     Super ::=  ;
SuperSome.      Super ::= SuperHow SetExp ;

SuperColon.     SuperHow ::= ":" ;
SuperArrow.     SuperHow ::= "->" ;
SuperMArrow.    SuperHow ::= "->>" ;

InitEmpty.      Init ::= ;
InitSome.       Init ::= InitHow Exp ;

InitHow_1.      InitHow ::= "=" ;
InitHow_2.      InitHow ::= ":=" ;

GCardEmpty.     GCard ::= ;
GCardXor.       GCard ::= "xor" ;
GCardOr.        GCard ::= "or" ;
GCardMux.       GCard ::= "mux" ;
GCardOpt.       GCard ::= "opt" ;
GCardInterval.  GCard ::= NCard ;

CardEmpty.      Card ::= ;
CardLone.       Card ::= "?" ;
CardSome.       Card ::= "+" ;
CardAny.        Card ::= "*" ;
CardNum.        Card ::= PosInteger ;
CardInterval.   Card ::= NCard ;

NCard.          NCard  ::= PosInteger ".." ExInteger ;

ExIntegerAst.   ExInteger ::= "*" ;
ExIntegerNum.   ExInteger ::= PosInteger ;

Path.           Name ::= [ModId] ;

DeclAllDisj.    Exp   ::= "all" "disj" Decl "|" Exp ;
DeclAll.        Exp   ::= "all"        Decl "|" Exp ;
DeclQuantDisj.  Exp   ::= Quant "disj" Decl "|" Exp ;
DeclQuant.      Exp   ::= Quant        Decl "|" Exp ;
EGMax.          Exp1  ::= "max" Exp2 ;
EGMin.          Exp1  ::= "min" Exp2 ;
EIff.           Exp1  ::= Exp1 "<=>" Exp2 ;
EImplies.       Exp2  ::= Exp2 "=>"  Exp3 ;
EOr.            Exp3  ::= Exp3 "||"  Exp4 ;
EXor.           Exp4  ::= Exp4 "xor" Exp5 ;
EAnd.           Exp5  ::= Exp5 "&&"  Exp6 ;
ENeg.           Exp6  ::= "!" Exp7 ;
ELt.            Exp7  ::= Exp7 "<"  Exp8 ;
EGt.            Exp7  ::= Exp7 ">"   Exp8 ;
EEq.            Exp7  ::= Exp7 "="  Exp8 ;
ELte.           Exp7  ::= Exp7 "<=" Exp8 ;
EGte.           Exp7  ::= Exp7 ">=" Exp8 ;
ENeq.           Exp7  ::= Exp7 "!=" Exp8 ;
EIn.            Exp7  ::= Exp7 "in" Exp8 ;
ENin.           Exp7  ::= Exp7 "not" "in" Exp8 ;
QuantExp.       Exp8  ::= Quant Exp12 ;
EAdd.           Exp9  ::= Exp9  "+" Exp10 ;
ESub.           Exp9  ::= Exp9  "-" Exp10 ;
EMul.           Exp10 ::= Exp10 "*" Exp11 ;
EDiv.           Exp10 ::= Exp10 "/" Exp11 ;
ESumSetExp.     Exp11 ::= "sum" Exp12;
ECSetExp.       Exp11 ::= "#" Exp12 ;
EMinExp.        Exp11 ::= "-" Exp12 ;
EImpliesElse.   Exp12 ::= "if" Exp12 "then" Exp12 "else" Exp13 ;
EInt.           Exp13 ::= PosInteger ;
EDouble.        Exp13 ::= PosDouble ;
EStr.           Exp13 ::= PosString ;
ESetExp.        Exp13 ::= SetExp ;

Union.          SetExp  ::= SetExp  "++" SetExp1 ;
UnionCom.       SetExp  ::= SetExp  ","  SetExp1 ;
Difference.     SetExp1 ::= SetExp1 "--" SetExp2 ;
Intersection.   SetExp2 ::= SetExp2 "&"  SetExp3 ;
Domain.         SetExp3 ::= SetExp3 "<:" SetExp4 ;
Range.          SetExp4 ::= SetExp4 ":>" SetExp5 ;
Join.           SetExp5 ::= SetExp5 "."  SetExp6 ;
ClaferId.       SetExp6 ::= Name ;

Decl.           Decl ::= [LocId] ":" SetExp ;

QuantNo.        Quant ::=  "no" ;
QuantLone.      Quant ::= "lone" ;
QuantOne.       Quant ::= "one" ;
QuantSome.      Quant ::= "some" ;

EnumIdIdent.    EnumId ::= PosIdent ;
ModIdIdent.     ModId  ::= PosIdent ;
LocIdIdent.     LocId  ::= PosIdent ;

Pos . Pos ::= Integer Integer;
Span . Span ::= Pos Pos;

separator           Declaration ""  ;
separator  nonempty EnumId      "|" ;
separator           Element     ""  ;
separator           Exp         ""  ;
separator  nonempty LocId       ";" ;
separator  nonempty ModId       "\\" ;

coercions Exp 13 ;
coercions SetExp 6 ;
coercions LTLExp 13;

--position token No ('n' 'o');
position token PosInteger (digit+) ;
position token PosDouble (digit+ '.' digit+ ('e' '-'? digit+)?) ;
position token PosString '"' ((char - ["\"\\"]) | ('\\' ["\"\\nt"]))* '"' ;
position token PosIdent (letter (letter|digit|'_'|'\'')*) ;

--position token 

--Question
-- Do we need to put tokens for every keyword in the syntax?