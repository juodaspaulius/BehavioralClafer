// main concept
abstract Person
  firstName : string
    [immutable]
  lastName : string
  [immutable lastName]
  xor gender
    male
    female
  age : integer
  alive ?
  [ age >= 0 ]
  // age only increases
  [ let x = age | X age <= x + 1]
  xor maritalStatus
    neverMarried
    married
      [ age >= 18 ] // you have to be at least 18 to be married
    divorced
      
    //[ neverMarried ---> married <---> divorced ]
    
    //from neverMarried to married - the next 2 constraints mean the same
    [neverMarried => F married ]
    [ neverMarried precedes married ]
    
    //from married to divorced - the next 3 constraints mean the same
    [ married => F divorced ]
    [ married precedes divorced]
    [ divorced responds to married ]
    
    //from divorced to married - the next 3 constraints mean the same
    [ divorced => F married]
    [ divorced precedes married ]
    [ divorced U married ]
    
    //from married you can't go to neverMarried
    //[married => ! neverMarried ]
    [married => F (married || divorced) ]
    [married U divorced]

    //from divorced you can't go to neverMarried - the next 2 constraints mean the same
    //[if divorced then ! neverMarried else true ]
    [ divorced => X ! neverMarried]

    //from neverMarried you cannot go to divorced - the next 2 constraints mean the same
    [ neverMarried => X !divorced ]
    [ neverMarried => X neverMarried || married ]

    
// abstract state
abstract NewBorn -> Person
  [ age = 0
  alive
  neverMarried ]
  //from NewBorn(i) to Dead(i)
  [ this => F Dead ]

abstract Dead -> Person
  [ ! alive ]

// concept instance
Bob : Person
  [ NewBorn ]    // temporal constraint




Tom: Person
  [firstName= "Tom"
  lastName= "Stevens"
  male
  ]

Alice: Person
  [
  firstName= "Alice"
  lastName= "Papp"
  gender.female
  age = 25
  ] 