entrypoints Module ;


-- To regenerate grammar:
--         cd src/Front
--         bnfc -m -haskell clafer.cf
--         Modify files Absclafer.hs, ErrM.hs, Printclafer.hs, so that they consider Front as a module name. (can be done by running make from src).
--         happy -gca Parclafer.y
--         alex -g Lexclafer.x

comment "//" ;
comment "/*" "*/" ;

Module.         Module ::= [Declaration] ;

EnumDecl.       Declaration ::= "enum" PosIdent "=" [EnumId] ;
ElementDecl.    Declaration ::= Element ;

Clafer.         Clafer ::= Abstract GCard PosIdent Super Card Init Elements ;
Constraint.     Constraint ::= "[" [ConstrExp] "]" ;
SoftConstraint. SoftConstraint ::= "(" [Exp] ")";
Goal.		Goal ::= "<<" [Exp] ">>" ;


-- The scope's parameters for all Temporal Patterns are basically an expression 
-- Scopes of Temporal Patterns - BEGIN
TmpScopeGlobally.	TmpScope ::= "globally" ;
TmpScopeGlobally.	TmpScope ::=  ;
TmpScopeBefore.		TmpScope ::= "before" Exp ;
TmpScopeAfter.		TmpScope ::= "after" Exp ;
TmpScopeBetweenAnd.	TmpScope ::= "between" Exp "and" Exp ;
TmpScopeAfterUntil.	TmpScope ::= "after" Exp "until" Exp ;

-- Immutable constraint
ImmutableConstr.	ConstrExp ::= Immutable;
ConstrExp.	        ConstrExp ::= Exp;

DeclLetBindingValue.	DeclLetBindingValue	::= PosIdent "=" Exp ;
DeclLetBindValue.	Exp16	::= "let" [DeclLetBindingValue] "|" Exp ;
separator nonempty DeclLetBindingValue "," ;

DeclBindingSet.		DeclBindingSet	::= PosIdent ":" SetExp ;
DeclBindSet1.		SetExp		::= "{" [DeclBindingSet] "|" Exp "}" ;
separator nonempty DeclBindingSet "," ;

DeclBindSet2.		SetExp		::= "{" [Decl] "|" Exp "}" ;
separator nonempty Decl "," ;


AbstractEmpty.  Abstract ::= ;
Abstract.       Abstract ::= "abstract" ;

-- ElementsEmpty causes parsing problems
-- Why does this happen???
ElementsEmpty.  Elements ::= ;
ElementsList.   Elements ::= "{" [Element] "}" ;

Subclafer.      Element ::= Clafer ;
ClaferUse.      Element ::= "`" Name Card Elements ;
Subconstraint.  Element ::= Constraint ;
Subgoal.	Element ::= Goal; 
Subsoftconstraint. Element ::=SoftConstraint;

SuperEmpty.     Super ::=  ;
SuperSome.      Super ::= SuperHow SetExp ;

SuperColon.     SuperHow ::= ":" ;
SuperArrow.     SuperHow ::= "->" ;
SuperMArrow.    SuperHow ::= "->>" ;

InitEmpty.      Init ::= ;
InitSome.       Init ::= InitHow Exp ;

InitHow_1.      InitHow ::= "=" ;
InitHow_2.      InitHow ::= ":=" ;

GCardEmpty.     GCard ::= ;
GCardXor.       GCard ::= "xor" ;
GCardOr.        GCard ::= "or" ;
GCardMux.       GCard ::= "mux" ;
GCardOpt.       GCard ::= "opt" ;
GCardInterval.  GCard ::= NCard ;

CardEmpty.      Card ::= ;
CardLone.       Card ::= "?" ;
CardSome.       Card ::= "+" ;
CardAny.        Card ::= "*" ;
CardNum.        Card ::= PosInteger ;
CardInterval.   Card ::= NCard ;

NCard.          NCard  ::= PosInteger ".." ExInteger ;

ExIntegerAst.   ExInteger ::= "*" ;
ExIntegerNum.   ExInteger ::= PosInteger ;

Path.           Name ::= [ModId] ;

-- LTL precedence order: <AP>, !, X, G, F, W, U, R, &&, ||, => 

DeclAllDisj.    Exp   ::= "all" "disj" Decl "|" Exp ;
DeclAll.        Exp   ::= "all"        Decl "|" Exp ;
DeclQuantDisj.  Exp   ::= Quant "disj" Decl "|" Exp ;
DeclQuant.      Exp   ::= Quant        Decl "|" Exp ;

TmpPrecedes.	Exp1 ::= Exp4 "precedes" Exp TmpScope;
TmpRespondsTo.	Exp1 ::= Exp4 "respondsTo" Exp TmpScope;
TmpRespondsTo.	Exp1 ::= Exp4 "responds" "to" Exp TmpScope;
TmpAbsence.	    Exp1 ::= Exp4 "is" "false" TmpScope ;
TmpUniversality.	Exp1 ::= Exp4 "is" "true" TmpScope ;
TmpBoundedExistence.	Exp1 ::= Exp4 "is" "true" PosInteger "times" TmpScope ;
TmpExistence.	Exp1 ::= "eventually" Exp4 TmpScope ;


EGMax.          Exp2  ::= "max" Exp3 ;
EGMin.          Exp3  ::= "min" Exp4 ;
EIff.           Exp4  ::= Exp4 "<=>" Exp5 ;
EImplies.       Exp5  ::= Exp5 "=>"  Exp6 ;
EOr.            Exp6  ::= Exp6 "||"  Exp7 ;
EXor.           Exp7  ::= Exp7 "xor" Exp8 ;
EAnd.           Exp8  ::= Exp8 "&&"  Exp9 ;
LtlRel.         Exp9  ::= Exp9 "R"  Exp10 ;
LtlUntil.       Exp9  ::= Exp9 "U"  Exp10 ;
LtlWUntil.      Exp9  ::= Exp9 "W"  Exp10 ;
LtlF.           Exp10  ::= "F"  Exp11 ;
LtlG.           Exp10  ::= "G"  Exp11 ;
LtlX.           Exp11  ::= "X"  Exp12 ;
ENeg.           Exp12  ::= "!" Exp13 ;
ELt.            Exp13  ::= Exp13 "<"  Exp14 ;
EGt.            Exp13  ::= Exp13 ">"  Exp14 ;
EEq.            Exp13  ::= Exp13 "="  Exp14 ;
ELte.           Exp13  ::= Exp13 "<=" Exp14 ;
EGte.           Exp13  ::= Exp13 ">=" Exp14 ;
ENeq.           Exp13  ::= Exp13 "!=" Exp14 ;
EIn.            Exp13  ::= Exp13 "in" Exp14 ;
ENin.           Exp13  ::= Exp13 "not" "in" Exp14 ;
QuantExp.       Exp14  ::= Quant Exp18 ;
EAdd.           Exp15  ::= Exp15  "+" Exp16 ;
ESub.           Exp15  ::= Exp15  "-" Exp16 ;
EMul.           Exp16 ::= Exp16 "*" Exp17 ;
EDiv.           Exp16 ::= Exp16 "/" Exp17 ;
ESumSetExp.     Exp17 ::= "sum" Exp18;
ECSetExp.       Exp17 ::= "#" Exp18 ;
EMinExp.        Exp17 ::= "-" Exp18 ;
EImpliesElse.   Exp18 ::= "if" Exp18 "then" Exp18 "else" Exp19 ;
EInt.           Exp19 ::= PosInteger ;
EDouble.        Exp19 ::= PosDouble ;
EStr.           Exp19 ::= PosString ;
ESetExp.        Exp19 ::= SetExp ;

Union.          SetExp  ::= SetExp  "++" SetExp1 ;
UnionCom.       SetExp  ::= SetExp  ","  SetExp1 ;
Difference.     SetExp1 ::= SetExp1 "--" SetExp2 ;
Intersection.   SetExp2 ::= SetExp2 "&"  SetExp3 ;
Domain.         SetExp3 ::= SetExp3 "<:" SetExp4 ;
Range.          SetExp4 ::= SetExp4 ":>" SetExp5 ;
Join.           SetExp5 ::= SetExp5 "."  SetExp6 ;
ClaferId.       SetExp6 ::= Name ;

Decl.           Decl ::= [LocId] ":" SetExp ;

QuantNo.        Quant ::= "no" ;
QuantLone.      Quant ::= "lone" ;
QuantOne.       Quant ::= "one" ;
QuantSome.      Quant ::= "some" ;

EnumIdIdent.    EnumId ::= PosIdent ;
ModIdIdent.     ModId  ::= PosIdent ;
LocIdIdent.     LocId  ::= PosIdent ;

Pos . Pos ::= Integer Integer;
Span . Span ::= Pos Pos;

separator           Declaration ""  ;
separator  nonempty EnumId      "|" ;
separator           Element     ""  ;
separator           Exp         ""  ;
separator           ConstrExp         ""  ;
separator  nonempty LocId       ";" ;
separator  nonempty ModId       "\\" ;

coercions Exp 19 ;
coercions SetExp 6 ;

--QuantNo.        Quant ::=  No ;
--position token No ('n' 'o');



-- This is the same as the following rule?
--position token Immutable ('i' 'm' 'm' 'u' 't' 'a' 'b' 'l' 'e') ;

position token Immutable {"immutable"} ;

position token PosInteger (digit+) ;
position token PosDouble (digit+ '.' digit+ ('e' '-'? digit+)?) ;
position token PosString '"' ((char - ["\"\\"]) | ('\\' ["\"\\nt"]))* '"' ;
position token PosIdent (letter (letter|digit|'_'|'\'')*) ;

