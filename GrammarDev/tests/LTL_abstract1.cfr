<<max A>>
A {
  <<max B>>
  B ? {}
  `E 5 {
    Y
    [E]
  }
  C ?
  D ?
  V -> integer
  
  // Structural constraint
  [#C>=5]
  [#A > 10 && #A< 5]
  [ no B ]
  
  // Behavioral constraints
  // LTL 1

  [ G ( A => F B ) ]
  [ G ( A => F (((B))) ) ]
  [ G ( A => F (B => C))]
  [ G ( A => F (B => C))]
  [ G ( A => F (B && C))]
  [ G ( A => F (B || C))]
  [ G ( A => F (B && ! C))]
  [ G (A && B => F C)]
  [ G (A && B => F (((C))) )]
  [ G (A R (C => F (B)))]
  [ G (A W (F ((B)) ))]
  
  [ G ( (#A > 5) => F (D)) ]
  
  [ G ( #A > 5 => F D) ]
  
  [ G ( #A > 5 => F D) ]
  
  [ A W B => X((C)) ]
  [ A R (B => D)]
  
  [ A R (B => D)]

  
  //what do you think about the next example? 
  //it works, but is it clear enough?
  [A W X B]
  
  
  
  //not working
  [ ((((A)))) R (B => D)]

  //not working
  [ G ( A => F ( some D)) ]
 
  //not working
  //[ G ( A => F (max sum D) ]
  
  
  [ G ( B => F (#C > 2))]
  
  [ G ( some A => F (lone B => one C))]

}
