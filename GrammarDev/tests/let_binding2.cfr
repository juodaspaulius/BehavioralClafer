A {
  B ?
    param : int
  C ?
    param : int
  param : int
  param2 : int ?
  D ?
    
  // Behavioral constraints
  
  [ G (let x = A.param, y = B.param | A.D => X(A.param <= x + 10) && F(B.param = y+2) ) ]
  
  //this is possible
  [ let a = A | a.param && X a.param2  ]
  
  //this should throw an error, since it shoulbe be written like this - LET operator with set comprehensions
  // [ let a = A | a.param && X a.param2  ]
  
  //[ let a : A | a.param && X a.param2  ]
  
  [ {a : A | a.param && X a.param2                }  ]
  
  
}
