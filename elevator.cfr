abstract Building
  Elevator +
    Position -> int
    Call -> int ?
    People -> int
    MAX_PEOPLE -> int // constant
    xor Doors
      Open
      Closed
    xor Status
      Stopped
      Moving    

  Floors -> int
  [ Position >= 0
    Position < Floors
    Call >= 0
    Call < Floors
    Floors < 50 // Tallest building Burj Khalifa has 163
    People >=0 
    People <= MAX_PEOPLE
    MAX_PEOPLE > 0
    (Position=Call) <=> Doors.Open
  ]

/*
 * Elevator temporal constraints. 
 * G means "globally"; F means "in the future" or "eventually along the subsequent path";  N means "next step"
 *
 ** Whenever there is a call elevator will eventually arive at the called floor
 * G((Call=0) => (F Position=0))  // G means "globally"; F means "in the future" 
 * G((Call=1) => (F Position=1))
 * G((Call=2) => (F Position=2))
 * G((Call=3) => (F Position=3))
 * G((Call=4) => (F Position=4))
 *
 *
 ** If the elevator is moving, then its doors are closed (for safety reasons)
 * G(Status.Moving => Doors.Closed)  
 *
 *
 ** The doors of the elevator are closed until it stops.
 * G(Doors.Closed U Status.Stopped)  
 * // at position Status.Stopped, condition Doors.Closed does not have to hold anymore
 *
 *
 ** At each transition, the elevator will move only one floor (increases or decreases current floor by 1).
 * G(Call => (N Position = $old(Position) +/- 1))  
 * OR
 * G(Status.Moving <=> (N Position = $old(Position) +/- 1))
 *
 *
 **If the elevator has at least one member, then eventually it will be empthy. 
 * G((People > 0) => (F People = 0))  
 *
 *
 ** If the elevator stopped and there isn't a call to the elevator, then in the next step the elevator 
 * is on the same floor.
 * G((Status.Stopped && !Call) => (N Position = $old(Position))
 *
 *
 * If the elevator stopped and there is a call (to a different floor that the current one), 
 * in the next step the elevator will start moving.
 * G((Status.Stopped && (Call != Position)) => (N Status.Moving))
 *  
 */

ITU: Building
  [Floors = 6
    MAX_PEOPLE = 10
  ]
