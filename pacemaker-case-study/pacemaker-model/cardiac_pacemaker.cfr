abstract PM //Pacemaker
  heart -> Heart
  ATimer -> int //Atria timer 
  VTimer -> int //Ventricles timer
  VSensor ?
    On ?
  ASensor ?
    On ?
  xor S //State or maybe should be called EventMarkers
    ASense
    VSense
    APace
    VPace
    ARecovery
    VRecovery
    SensingAPulse
    SensingVPulse
    ASensingTimeout
    VSensingTimeout
  MF // ModeFeatures
    ASensing ?
    VSensing ?
    APacing ?
    VPacing ?
    TrackedPacing ?
    xor SensingResponse
      Inhibit
      Trigger
      DualTracking
      None
  xor Mode
    DDI
    VOO 
    AOO 
    DOO 
    VVI 
    AAI 

/* Currently unused modes
    DDD 
    VDD 
    VVT 
    AAT 
    OVO 
    OAO 
    ODO 
    OOO
    DDDR 
    VDDR 
    DDIR 
    DOOR 
    VOOR 
    AOOR 
    VVIR 
*/
  [
    DDI => (MF.ASensing && MF.VSensing && MF.APacing && MF.VPacing && MF.TrackedPacing)
    
    AAI => (MF.ASensing && !MF.VSensing && MF.APacing && !MF.VPacing && !MF.TrackedPacing)
    
    VVI => (!MF.ASensing && MF.VSensing && !MF.APacing && MF.VPacing && !MF.TrackedPacing)

    AOO => (!MF.ASensing && !MF.VSensing && MF.APacing && !MF.VPacing && !MF.TrackedPacing)

    VOO => (!MF.ASensing && !MF.VSensing && !MF.APacing && MF.VPacing && !MF.TrackedPacing)
    
    DOO => (MF.ASensing && MF.VSensing && !MF.APacing && !MF.VPacing && MF.TrackedPacing)

    (DDI || VVI || AAI) => SensingResponse.Inhibit
    (AOO || DOO || VOO) => SensingResponse.None

    S.APace => heart.S.APulse
    S.VPace => heart.S.VPulse


    !MF.ASensing => (!S.ASense || !S.SensingAPulse)
    !MF.VSensing => (!S.VSense || !S.SensingVPulse)

    !MF.APacing => (!S.APace)
    !MF.VPacing => (!S.VPace)

    (!MF.ASensing && !MF.APacing) => !S.ARecovery
    (!MF.VSensing && !MF.VPacing) => !S.VRecovery

    !MF.ASensing => !ASensor.On
    !MF.VSensing => !VSensor.On

    /* ==== Behavior =====
     *      Definitions
     *
     * Follow operator (>>>)
     * A >>> B (A is directly followed by B)
     *
     * Response operator (>>)
     * A >> B (A is eventually followed by B)
     *
     * Response operator with cycle scope (@>>)
     * A @>> B (A is eventually followed by B but before next A occur)
     *
     * Response operator with before scope (>>)
     * A >>{D} B (A is eventually followed by B but before next D occurs (if ever))
     * 
     *
     *      Constraints
     * 
     * S.SensingAPulse >>> (S.ASense || S.ASensingTimeout)
     * S.SensingVPulse >>> (S.VSense || S.VSensingTimeout)
     * 
     * (MF.ASensing & MF.APacing) => (S.ASensingTimeout >>> S.APace)
     * (MF.VSensing & MF.VPacing) => (S.VSensingTimeout >>> S.VPace)
     *
     * MF.APacing => (S.APace >>> S.ARecovery)
     * MF.VPacing => (S.VPace >>> S.VRecovery)
     * 
     * (MF.ASensing && MF.SensingResponse.Inhibit) => (S.ASense >>> S.ARecovery)
     * (MF.VSensing && MF.SensingResponse.Inhibit) => (S.VSense >>> S.VRecovery)
     *
     * (MF.VPacing && MF.ASensing) => (S.VRecovery >>> S.SensingAPulse)
     * (MF.APacing && MF.VSensing) => (S.ARecovery >>> S.SensingVPulse)
     * 
     *
     *
     */
    


  ]


abstract Heart
  xor S //ECGState
    APulse
    VPulse
    Recovery    

abstract Person
  heart : Heart

abstract PersonWithPM: Person
  pm : PM
  [pm.heart = this.heart]


